----- ChartPLTWindow.py -----
import sys

import numpy as np
from PyQt5 import QtWidgets

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, \
    NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

from main import Calculation, ChartLinePltData, ChartQuadRegressPltData

from functions import get_super


class ChartPLTWindow(QtWidgets.QDialog):

    def __init__(self, n, *args, **kwargs):
        super(ChartPLTWindow, self).__init__(*args, **kwargs)
        self.setWindowTitle(f'График {n}')
        self.setFixedSize(800, 800)

        fig = Figure()
        self.axes = fig.add_subplot(111)

        sc = FigureCanvasQTAgg(fig)

        toolbar = NavigationToolbar(sc, self)

        layout = QtWidgets.QGridLayout(self)
        layout.addWidget(toolbar, 0, 0, 1, 1)
        layout.addWidget(sc, 1, 0, 1, 1)



    def line(self, data: ChartLinePltData):
        self.axes.plot(data.df, marker='o', label=[f"E={i}" for i in data.columns])
        self.axes.grid(linestyle='--')

        self.axes.set_ylabel(data.xlabel)
        self.axes.set_xlabel(data.ylabel)
        self.axes.set_xlim([0, max(data.index) * 1.2])
        self.axes.set_ylim([0, max(data.df.max()) * 1.2])

    def quad_regress(self, data: ChartQuadRegressPltData):
        for i in data.columns:
            model = np.poly1d(np.polyfit(data.df[i].index.tolist(), data.df[i].values.tolist(), 2))
            polyline = np.linspace(0.1, 1, 50)
            coefficients = list(model.coefficients)
            self.axes.plot(
                polyline, model(polyline), linestyle='dashed', linewidth=2,
                label=f"{round(coefficients[0], 3)}x{get_super('2')} "
                      f"{'+' if coefficients[1] > 0 else ''} {round(coefficients[1], 3)}x "
                      f"{'+' if coefficients[2] > 0 else ''} {round(coefficients[2], 3)}"
            )

    def start(self):
        self.axes.legend()
        self.show()
        self.exec_()


if __name__ == "__main__":
    d_lst_input = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    E_lst_input = [1, 1.6]
    calculation = Calculation(d_lst_input=d_lst_input, E_lst_input=E_lst_input)
    app = QtWidgets.QApplication(sys.argv)
    chartPlt = ChartPLTWindow(1)
    chartPlt.line(calculation.chart_v_y_data)
    chartPlt.quad_regress(calculation.chart_quad_regress_data)
    chartPlt.start()
    app.exec_()


----- Charts.py -----
import matplotlib.pyplot as plt
from pandas import DataFrame

pi = 3.14159265
Yc = 17.3 * (10 ** -6)

class ChartLinePltData:
    def __init__(self, n, df: DataFrame, xlabel: str = '', ylabel: str = ''):
        self.n = n
        self.columns = df.columns
        self.index = df.index
        self.df = df
        self.xlabel = xlabel
        self.ylabel = ylabel


class ChartQuadRegressPltData:
    def __init__(self, n, df: DataFrame, linestyle='dashed', linewidth=2):
        self.n = n
        self.columns = df.columns
        self.index = df.index
        self.df = df
        self.linestyle = linestyle
        self.linewidth = linewidth
        pass


class ChartLinePLT:
    def __init__(self, data: ChartLinePltData, alpha=0.75):
        plt.figure(data.n)
        plt.plot(data.df, marker='o', label=[f"E={i}" for i in data.columns], alpha=alpha)
        plt.grid(linestyle='--')
        plt.ylabel(data.xlabel)
        plt.xlabel(data.ylabel)
        plt.xlim([0, max(data.index) * 1.2])
        plt.ylim([0, max(data.df.max()) * 1.2])


----- create_zip.py -----
import shutil
shutil.make_archive('dist/UI', 'zip', 'dist/UI')

----- functions.py -----
from math import pi
from Monitor import getMonitors
from settings import STANDART_DPI



def get_super(x):
    normal = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-=()"
    super_s = "ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾQᴿˢᵀᵁⱽᵂˣʸᶻᵃᵇᶜᵈᵉᶠᵍʰᶦʲᵏˡᵐⁿᵒᵖ۹ʳˢᵗᵘᵛʷˣʸᶻ⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾"
    res = x.maketrans(''.join(normal), ''.join(super_s))
    return x.translate(res)


def get_sub(x):
    normal = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-=()"
    sub_s = "ₐ₈CDₑբGₕᵢⱼₖₗₘₙₒₚQᵣₛₜᵤᵥwₓᵧZₐ♭꜀ᑯₑբ₉ₕᵢⱼₖₗₘₙₒₚ૧ᵣₛₜᵤᵥwₓᵧ₂₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎"
    res = x.maketrans(''.join(normal), ''.join(sub_s))
    return x.translate(res)


def degrees_to_radians(angle: float) -> float:
    return angle * pi / 180


def change_size(window):
    screen = window.screen()
    monitors = getMonitors()
    monitor = monitors[screen.name()]
    print(screen.name(), monitor.get_max_dpi())
    k = monitor.get_max_dpi() / STANDART_DPI
    window.setMinimumSize(round(window.size().width() * k), round(window.size().height() * k))
    window.setMaximumSize(round(window.size().width() * k), round(window.size().height() * k))
    window.setBaseSize(round(window.size().width() * k), round(window.size().height() * k))


def radians_to_degrees(angle_rad: float) -> float:
    return angle_rad * 180 / pi


----- main.py -----
import math



pi = 3.14159265
Yc = 17.3 * (10 ** -6)


class Calculation:
    def __init__(self, d, n):
        self.d = d
        self.n = n
        self.i = None

    def simple(self):
        self.i = (self.d / 100) / (1 - self.n * (self.d / 100))

    def difficult(self):
        self.i = self.d / (100 * (1 - (self.d / 100)))


if __name__ == "__main__":
    d = 20
    n = 0.5
    calculation = Calculation(d, n)
    calculation.simple()
    print(calculation.i)
    calculation.difficult()
    print(calculation.i)


----- Monitor.py -----
import ctypes
import win32api
from screeninfo import get_monitors

PROCESS_PER_MONITOR_DPI_AWARE = len(get_monitors())
MDT_EFFECTIVE_DPI = 0


def round_custom(num, step):
    return round(num / step) * step


class Monitor:
    def __init__(self, shcore, monitor):
        self.shcore = shcore
        self.monitor = monitor
        self.dpiX = ctypes.c_uint()
        self.dpiY = ctypes.c_uint()
        shcore.GetDpiForMonitor(
            monitor[0].handle,
            MDT_EFFECTIVE_DPI,
            ctypes.byref(self.dpiX),
            ctypes.byref(self.dpiY)
        )

    def get_max_dpi(self):
        return max([round_custom(self.dpiX.value, 25), round_custom(self.dpiY.value, 25)])


def getMonitors():
    dct = {}
    shcore = ctypes.windll.shcore
    monitors = win32api.EnumDisplayMonitors()
    shcore.SetProcessDpiAwareness(PROCESS_PER_MONITOR_DPI_AWARE)
    for i, monitor in enumerate(monitors):
        name = win32api.GetMonitorInfo(monitors[i][0])['Device']
        monitor_obj = Monitor(shcore, monitor)
        dct[name] = monitor_obj
        print(
            f"{name} dpiX: {round_custom(monitor_obj.dpiX.value, 25)}, dpiY: {round_custom(monitor_obj.dpiY.value, 25)}"
        )
    return dct


----- MyThread.py -----
from PyQt5.QtCore import QThread


class MyThread(QThread):
    def __init__(self, fun=lambda: None):
        self.fun = fun
        super(MyThread, self).__init__()

    def start(self, priority: 'QThread.Priority' = None) -> None:
        self.fun()
        super().start()
        self.exec_()
        self.quit()


----- py_to_txt.py -----
import os

path = "."

exclude = set(['venv', '.idea', '.venv'])
lst = []
for root, d_names, f_names in os.walk(path):
    d_names[:] = [d for d in d_names if d not in exclude]
    if len(d_names) != 0:
        for i in range(len(f_names)):
            if os.path.splitext(f_names[i])[1] == '.py':
                lst.append(os.path.join(root, f_names[i]))
print(lst)

with open('AllCode.txt', 'w+', encoding="UTF-8") as fw:
    for i in lst:
        with open(i, 'r', encoding="UTF-8") as fr:
            name = i.replace('.\\', '').replace('\\', '/')
            fw.write('-' * 5 + f' {name} ' + '-' * 5)
            fw.write('\n')
            arr = fr.read().split('\n')
            s = ''
            for i in arr:
                    s += i + '\n'
            fw.write(s)
            fw.write('\n')


----- settings.py -----
DEDUG = True


----- Table.py -----
from typing import Callable
from typing import List, Any

from PyQt5 import QtWidgets, QtGui
from files.TableWindow import Ui_Form as Ui_Form_Table
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from UI import mywindow


class Table(QtWidgets.QDialog):
    def __init__(self, base: 'mywindow', n: int, m: int, data: List[List[Any]] = None,
                 block: bool = False,
                 heading_x: Callable[[int], str] = lambda iterator: str(iterator),
                 heading_y: Callable[[int], str] = lambda iterator: str(iterator),
                 filter_table=lambda dct: round(dct['value'], 5)):
        super(Table, self).__init__()
        self.ui = Ui_Form_Table()
        self.ui.setupUi(self)
        self.setWindowTitle('Таблица')
        self.base = base
        self.block = block
        self.heading_x = heading_x
        self.heading_y = heading_y
        if data is None:
            data = []
        self.data = data
        self.n = n
        self.m = m
        self.filter = filter_table

        VerticalHeaderLabels = [self.heading_y(i) for i in range(max(len(self.data), self.m))]
        HorizontalHeaderLabels = [
            self.heading_x(i) for i in
            range(max(len(self.data[0]) if len(self.data) > 0 else self.n, self.n))
        ]
        for j in range(min(len(self.data[0]) if len(self.data) > 0 else self.n, self.n)):
            self.ui.tableWidget.insertColumn(j)

        for i in range(min(len(self.data), self.m)):
            self.ui.tableWidget.insertRow(i)
            for j in range(min(len(self.data[0]) if len(self.data) > 0 else self.n, self.n)):
                self.ui.tableWidget.setItem(
                    i,
                    j,
                    QtWidgets.QTableWidgetItem(
                        str(self.filter({'i': i, 'j': j, 'value': self.data[i][j]}))
                    )
                )

        for j in range(len(self.data[0]) if len(self.data) > 0 else 0, self.n):
            self.ui.tableWidget.insertColumn(j)
        for i in range(len(self.data), self.m):
            self.ui.tableWidget.insertRow(i)

        for i in range(0, self.m):
            start = len(self.data[0]) if len(self.data) > 0 else 0
            if len(self.data) <= i < self.m:
                start = 0
            for j in range(start, self.n):
                self.ui.tableWidget.setItem(
                    i,
                    j,
                    QtWidgets.QTableWidgetItem("0.0")
                )
        self.ui.tableWidget.setHorizontalHeaderLabels(HorizontalHeaderLabels)
        self.ui.tableWidget.setVerticalHeaderLabels(VerticalHeaderLabels)

        if self.block:
            self.ui.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

        self.ui.pushButton.clicked.connect(self.download_table)
        self.ui.pushButton.clicked.connect(self.close_window)

    def close_window(self):
        self.close()

    def download_table(self):
        flag = False
        self.data = []
        for i in range(self.m):
            lst = []
            for j in range(self.n):
                try:
                    lst.append(
                        float(self.ui.tableWidget.item(i, j).text().replace(",", '.')))
                    self.ui.tableWidget.item(i, j).setBackground(QtGui.QColor(255, 255, 255))
                except ValueError:
                    self.ui.tableWidget.item(i, j).setBackground(QtGui.QColor(255, 0, 0))
                    flag = True
            self.data.append(lst)
        if flag:
            self.data = []
        else:
            self.close()
        print(self.data)

----- TableLoader.py -----
from typing import List, Any, TYPE_CHECKING
from PyQt5.QtWidgets import QLabel
from Table import Table

if TYPE_CHECKING:
    from UI import mywindow


class TableLoader:
    def __init__(self, main_window, n: int = 0, m: int = 0, label: QLabel = None,
                 data: List[List[Any]] = None, **kwargs):
        self.data = data
        if data is None:
            self.data = []
        self.n = n
        self.m = m
        self.main_window: 'mywindow' = main_window
        self.kwargs = kwargs
        self.label = label

    def open_table(self):
        self.main_window.variables.update()
        tale_window = Table(self.main_window, self.n, self.m, self.data, **self.kwargs)
        tale_window.show()
        tale_window.exec_()
        self.data = tale_window.data

        if self.label:
            if self.main_window:
                self.label.setStyleSheet("background-color: lightgreen")
            else:
                self.label.setStyleSheet("background-color: red")

    def valid(self, m, n):
        if len(self.data) == self.m:
            if len(self.data[0]) == self.n or len(self.data) == 0 == self.n:
                if self.n == n and self.m == m:
                    return True
                else:
                    self.n = n
                    self.m = m
        if self.label:
            self.label.setStyleSheet("background-color: red")
        return False


----- test.py -----



def f1(s):
    lst1 = []
    lst2 = []
    lst4 = []

    lst = s.split(', ')

    for i in lst:
        lst1.append(f"{i}=self.variables.{i},")
        lst2.append(f"self.{i} = mywindow.is_float(self.main_window.ui.doubleSpinBox)")
        lst4.append(f"self.{i}=None")

    print()
    for i in lst4:
        print(i)
    print()
    for i in lst2:
        print(i)
    print()
    for i in lst1:
        print(i)


s = 'n0, i, s1, n1, s2, n2'
f1(s)
lst = '''self.n0 = mywindow.is_float(self.main_window.ui.doubleSpinBox_31)
        self.i = mywindow.is_float(self.main_window.ui.doubleSpinBox_32)
        self.s1 = mywindow.is_float(self.main_window.ui.doubleSpinBox_35)
        self.n1 = mywindow.is_float(self.main_window.ui.doubleSpinBox_37)
        self.s2 = mywindow.is_float(self.main_window.ui.doubleSpinBox_36)
        self.n2 = mywindow.is_float(self.main_window.ui.doubleSpinBox_38)'''\
    .replace('        ', '').replace('(', ')').split('\n')

for i in lst:
    a = i.split(')')


----- UI.py -----
from typing import Callable
from typing import List, Any

from PyQt5 import QtWidgets

from files.MainWindow import Ui_MainWindow
from files.ResultWindow import Ui_Form
from files.TableWindow import Ui_Form as Ui_Form_Table

from main import Calculation
from functions import change_size
from MyThread import MyThread
from TableLoader import TableLoader

from settings import DEDUG

import sys


class Variables:
    def __init__(self, main_window):
        self.main_window: mywindow = main_window
        self.d = None
        self.n = None
        self.load()

    def load(self):
        self.d = mywindow.is_float(self.main_window.ui.doubleSpinBox)
        self.n = mywindow.is_float(self.main_window.ui.doubleSpinBox_2)

    def update(self):
        self.load()


class mywindow(QtWidgets.QMainWindow):

    def __init__(self):
        super(mywindow, self).__init__()

        self.calculation: Calculation = None
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        if DEDUG:

        change_size(self)

        self.lst_Thread = []

        self.variables = Variables(self)


        




        if DEDUG:
            pass


        add_def_pushButton = lambda : self.calculation.simple()
        add_def_pushButton_2 = lambda : self.calculation.difficult()
        self.ui.pushButton.clicked.connect(lambda : self.calculate(add_def_pushButton))
        self.ui.pushButton_2.clicked.connect(lambda : self.calculate(add_def_pushButton_2))
        

    def calculate(self, fun, *args, **kwargs):
        self.variables.update()
        condition = True
        if condition:
            self.calculation = Calculation(
                d=self.variables.d,
                n=self.variables.n,
            )
            fun(*args, **kwargs)
            window = Finish(
                self
            )
            window.show()

            windowThread = MyThread(lambda: window.exec_())
            windowThread.start()
            self.lst_Thread.append(windowThread)

    def exec_(self) -> int:
        a = super().exec_()
        for i in self.lst_Thread:
            i.wait()
        return a

    @staticmethod
    def is_float(value: QtWidgets.QDoubleSpinBox):
        try:
            a = float(value.value())
            value.setStyleSheet("QDoubleSpinBox {}")
            return a
        except ValueError:
            value.setStyleSheet("QDoubleSpinBox { background-color: red; }")
            raise ValueError()


class Finish(QtWidgets.QDialog):
    def __init__(self, parent: mywindow):
        super(Finish, self).__init__()
        self.ui = Ui_Form()
        self.parent = parent
        self.ui.setupUi(self)
        change_size(self)

        self.ui.doubleSpinBox.setValue(round(self.parent.calculation.i * 100, 2))





        self.ui.pushButton.clicked.connect(self.exit_w)

    def exit_w(self):
        self.close()


    def view_table(self):
        pass


app = QtWidgets.QApplication([])
application = mywindow()
application.show()

sys.exit(app.exec())


----- files/MainWindow.py -----



from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(766, 214)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setMinimumSize(QtCore.QSize(400, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.gridLayout_5.addWidget(self.label_11, 0, 0, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMinimumSize(QtCore.QSize(400, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setMinimumSize(QtCore.QSize(30, 0))
        self.label_2.setMaximumSize(QtCore.QSize(30, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setItalic(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setMinimumSize(QtCore.QSize(20, 0))
        self.label_3.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setMinimumSize(QtCore.QSize(214, 25))
        self.doubleSpinBox.setMaximumSize(QtCore.QSize(16777215, 220))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.doubleSpinBox.setFont(font)
        self.doubleSpinBox.setDecimals(0)
        self.doubleSpinBox.setMaximum(16777215.0)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.gridLayout.addWidget(self.doubleSpinBox, 0, 3, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setMinimumSize(QtCore.QSize(35, 0))
        self.label_4.setMaximumSize(QtCore.QSize(35, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 4, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 5, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setMinimumSize(QtCore.QSize(400, 35))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 0, 0, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setMinimumSize(QtCore.QSize(30, 0))
        self.label_7.setMaximumSize(QtCore.QSize(30, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setItalic(True)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.gridLayout_2.addWidget(self.label_7, 0, 1, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setMinimumSize(QtCore.QSize(20, 0))
        self.label_8.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout_2.addWidget(self.label_8, 0, 2, 1, 1)
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_2.setMinimumSize(QtCore.QSize(214, 25))
        self.doubleSpinBox_2.setMaximumSize(QtCore.QSize(16777215, 220))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.doubleSpinBox_2.setFont(font)
        self.doubleSpinBox_2.setDecimals(2)
        self.doubleSpinBox_2.setMaximum(16777215.0)
        self.doubleSpinBox_2.setSingleStep(0.01)
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")
        self.gridLayout_2.addWidget(self.doubleSpinBox_2, 0, 3, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setMinimumSize(QtCore.QSize(35, 0))
        self.label_9.setMaximumSize(QtCore.QSize(35, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.gridLayout_2.addWidget(self.label_9, 0, 4, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setText("")
        self.label_10.setObjectName("label_10")
        self.gridLayout_2.addWidget(self.label_10, 0, 5, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout_2, 1, 0, 1, 1)
        self.gridLayout_5.addLayout(self.gridLayout_3, 1, 0, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_4.addWidget(self.pushButton, 0, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_4.addWidget(self.pushButton_2, 0, 1, 1, 1)
        self.gridLayout_5.addLayout(self.gridLayout_4, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Расчет процентных ставок, эквивалентных учетным ставкам"))
        self.label_11.setText(_translate("MainWindow", "<html><head/><body><p>Расчет процентных ставок, эквивалентных учетным ставкам</p></body></html>"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p>Введите размер годовой учетной ставки:</p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p>d</p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p>=</p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p>%</p></body></html>"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p>Введите срок финансовой операции:</p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p>n</p></body></html>"))
        self.label_8.setText(_translate("MainWindow", "<html><head/><body><p>=</p></body></html>"))
        self.label_9.setText(_translate("MainWindow", "<html><head/><body><p>лет</p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Рассчитать по простой ставке"))
        self.pushButton_2.setText(_translate("MainWindow", "Рассчитать по сложной ставке"))


----- files/ResultWindow.py -----



from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1100, 100)
        Form.setMinimumSize(QtCore.QSize(1100, 100))
        Form.setMaximumSize(QtCore.QSize(1100, 16777215))
        Form.setStyleSheet("")
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setMinimumSize(QtCore.QSize(30, 0))
        self.label_2.setMaximumSize(QtCore.QSize(30, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setItalic(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setMinimumSize(QtCore.QSize(20, 0))
        self.label_3.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(Form)
        self.doubleSpinBox.setEnabled(False)
        self.doubleSpinBox.setMinimumSize(QtCore.QSize(214, 25))
        self.doubleSpinBox.setMaximumSize(QtCore.QSize(16777215, 220))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.doubleSpinBox.setFont(font)
        self.doubleSpinBox.setStyleSheet("color: black; background-color: white;")
        self.doubleSpinBox.setDecimals(2)
        self.doubleSpinBox.setMinimum(-999999999.0)
        self.doubleSpinBox.setMaximum(999999999.0)
        self.doubleSpinBox.setSingleStep(0.01)
        self.doubleSpinBox.setProperty("value", 0.0)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.gridLayout.addWidget(self.doubleSpinBox, 0, 3, 1, 1)
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setMinimumSize(QtCore.QSize(30, 0))
        self.label_4.setMaximumSize(QtCore.QSize(30, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 4, 1, 1)
        self.label_5 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_5.setFont(font)
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 5, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_2.addWidget(self.pushButton, 1, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Процентная годовая ставка, эквивалентная данной учетной ставке, равна"))
        self.label.setText(_translate("Form", "Процентная годовая ставка, эквивалентная данной учетной ставке, равна:"))
        self.label_2.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:14pt;\">i</span></p></body></html>"))
        self.label_3.setText(_translate("Form", "="))
        self.label_4.setText(_translate("Form", "%"))
        self.pushButton.setText(_translate("Form", "ОК"))


----- files/TableWindow.py -----



from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1100, 700)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(100)
        self.tableWidget.verticalHeader().setDefaultSectionSize(75)
        self.gridLayout.addWidget(self.tableWidget, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 1, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "Готово"))


